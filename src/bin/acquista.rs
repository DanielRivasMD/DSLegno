////////////////////////////////////////////////////////////////////////////////////////////////////

// library wrapper
use ds_legno::*;

////////////////////////////////////////////////////////////////////////////////////////////////////

// standard libraries
use anyhow::Result as anyResult;
use std::fs::File;

////////////////////////////////////////////////////////////////////////////////////////////////////

// crate utilities
use crate::utils::sql::*;
use crate::utils::xml_parser::*;

////////////////////////////////////////////////////////////////////////////////////////////////////

// DOC: first argument will be used as input
// DOC: check whether invoice number exists prior to inserting

////////////////////////////////////////////////////////////////////////////////////////////////////

fn main() -> anyResult<()> {
	// get path
	let file_path = std::env::args_os().nth(1).unwrap();
	let file = File::open(file_path)?;

	// parse file
	let fattura_to_capture = xml_parser(file)?;

	// open database connection
	let mut conn = establish_db_connection()?;

	// prepare data to upload
	let fatture_to_upload = fattura_to_capture.upload_formatter()?;

	// upload to database
	for fattura_to_upload in fatture_to_upload.into_iter() {
		let _ = insert_insertable_struct(fattura_to_upload, &mut conn)?;
	}

	Ok(())
}

////////////////////////////////////////////////////////////////////////////////////////////////////
